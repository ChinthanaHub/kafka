---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Kafka Production VPC Stack'

# 172.30.61.0/24   - Primary MSK
# 172.30.62.0/26   - Addon intigration | Primary BastionHost 
# 172.30.62.64/26  - TransitGatewayAttachmnet
# 172.30.62.128/26 - Public NAT

Parameters:
  EnvironmentName:
    Type: String

  #Primary MSK
  CidrBlock01:
    Type: String
    Default: 172.30.61.0/24

  #Public Primary BastionHost
  CidrBlock02:
    Type: String
    Default: 172.30.62.0/24 

#   # # TransitGateway
#   TransitGatewayId:
#     AllowedValues:
#       - tgw-0e10f1125fbf6b385 #non-production
#       - tgw-04d1ed0a1d2b0eefb #production
#       - tgw-07dcfe2cca3d93753 #internal
#     Type: String
#     Default: tgw-0e10f1125fbf6b385

Resources:
  #null resource for testing purposes.
  NullResource:
    Type: AWS::CloudFormation::WaitConditionHandle

  #####-----Vpc-----#####
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:
        Ref: CidrBlock01
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
      Tags:
        - Key: Name
          Value: !Sub 
            - ${Environment}-vpc
            - Environment: !Ref EnvironmentName
        - Key: Stack
          Value: !Ref 'AWS::StackId'

  VpcCidrBlock02:
    Type: AWS::EC2::VPCCidrBlock
    Properties:
      VpcId: !Ref Vpc
      CidrBlock:
        Ref: CidrBlock02


  ###-----Public subnet-----#####
  #BastionHost subnets
  BastionHostSubnet01:
    Type: AWS::EC2::Subnet
    DependsOn: VpcCidrBlock02
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::Select:
          - 0
          - Fn::Cidr:
              - !Ref CidrBlock02
              - 4
              - 6
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub
            - '${environmentName}-BastionHostSubnet01'
            - { environmentName: !Ref EnvironmentName }
        - Key: !Sub
            - kubernetes.io/cluster/${clustreName}-eks
            - { clustreName: !Ref EnvironmentName }
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: '1'

  ######-----Private subnets-----#####
  #MSK group subnets
  MSKSubnet01:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 0
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::Select:
          - 0
          - Fn::Cidr:
              - !Ref CidrBlock01
              - 4
              - 6
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub
            - '${environmentName}-MSKSubnet01'
            - { environmentName: !Ref EnvironmentName }
        - Key: !Sub
            - kubernetes.io/cluster/${clustreName}-eks
            - { clustreName: !Ref EnvironmentName }
          Value: shared

  MSKSubnet02:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::Select:
          - 1
          - Fn::Cidr:
              - !Ref CidrBlock01
              - 4
              - 6
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub
            - '${environmentName}-MSKSubnet02'
            - { environmentName: !Ref EnvironmentName }
        - Key: !Sub
            - kubernetes.io/cluster/${clustreName}-eks
            - { clustreName: !Ref EnvironmentName }
          Value: shared

  MSKSubnet03:
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::Select:
          - 2
          - Fn::Cidr:
              - !Ref CidrBlock01
              - 4
              - 6
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub
            - '${environmentName}-MSKSubnet03'
            - { environmentName: !Ref EnvironmentName }
        - Key: !Sub
            - kubernetes.io/cluster/${clustreName}-eks
            - { clustreName: !Ref EnvironmentName }
          Value: shared

  #TransitGatewayAttachmnet subnets
  TransitGatewayAttachmnetSubnet01:
    DependsOn: VpcCidrBlock02
    Type: AWS::EC2::Subnet
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 1
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::Select:
          - 1
          - Fn::Cidr:
              - !Ref CidrBlock02
              - 4
              - 6
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub
            - '${environmentName}-TrGwAttchSubnet01'
            - { environmentName: !Ref EnvironmentName }

   #PublicNAT subnets
  PublicNATSubnet01:
    Type: AWS::EC2::Subnet
    DependsOn: VpcCidrBlock02
    Properties:
      MapPublicIpOnLaunch: false
      AvailabilityZone:
        Fn::Select:
          - 2
          - Fn::GetAZs:
              Ref: AWS::Region
      CidrBlock:
        Fn::Select:
          - 2
          - Fn::Cidr:
              - !Ref CidrBlock02
              - 4
              - 6
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: !Sub
            - '${environmentName}-PublicNATSubnet01'
            - { environmentName: !Ref EnvironmentName }
        - Key: !Sub
            - kubernetes.io/cluster/${clustreName}-eks
            - { clustreName: !Ref EnvironmentName }
          Value: shared
        - Key: kubernetes.io/role/elb
          Value: '1'

#   # NAT subnets
#   NatSubnet01:
#     DependsOn: VpcCidrBlock06
#     Type: AWS::EC2::Subnet
#     Properties:
#       MapPublicIpOnLaunch: false
#       AvailabilityZone:
#         Fn::Select:
#           - 0
#           - Fn::GetAZs:
#               Ref: AWS::Region
#       CidrBlock: !Ref CidrBlock06
#       VpcId: !Ref Vpc
#       Tags:
#         - Key: Name
#           Value: !Sub
#             - '${environmentName}-NatSubnet01'
#             - { environmentName: !Ref EnvironmentName }

  ######-----Internet gateway-----#####
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties:
      Tags:
        - Key: Name
          Value: !Sub
            - '${environmentName}-igw'
            - { environmentName: !Ref EnvironmentName }
        - Key: Stack
          Value: !Ref 'AWS::StackId'
        - Key: map-migrated
          Value: d-server-03urz7jkjyk1qu

  InternetGatewayAttachment:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  #####-----Elastic IP-----#####
  NatGatewayEip01:
    DependsOn: InternetGatewayAttachment
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
      Tags:
        - Key: Name
          Value: !Sub
            - '${environmentName}-NatGatewayEIP01'
            - { environmentName: !Ref EnvironmentName }
        - Key: Stack
          Value: !Ref 'AWS::StackId'
        - Key: map-migrated
          Value: d-server-03urz7jkjyk1qu

  # Public NAT
  PublicNatGateway01:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt 'NatGatewayEip01.AllocationId'
      ConnectivityType: public
      PrivateIpAddress: 172.30.62.135
      SubnetId: !Ref PublicNATSubnet01
      Tags:
        - Key: Name
          Value: !Sub
            - '${environmentName}-NAT01'
            - { environmentName: !Ref EnvironmentName }
        - Key: Stack
          Value: !Ref 'AWS::StackId'
        - Key: map-migrated
          Value: d-server-03urz7jkjyk1qu
 
#   # Private NAT
#   PrivateNatGateway01:
#     Type: AWS::EC2::NatGateway
#     Properties:
#       ConnectivityType: private
#       PrivateIpAddress: 172.30.134.10
#       SubnetId: !Ref NatSubnet01
#       Tags:
#         - Key: Name
#           Value: !Sub
#             - '${environmentName}-PrivateNAT01'
#             - { environmentName: !Ref EnvironmentName }
#         - Key: Stack
#           Value: !Ref 'AWS::StackId'
#         - Key: map-migrated
#           Value: d-server-03urz7jkjyk1qu

# ##################################################################### 
# #### >> TGW attachment needs to be done on the final cut-over << ####          
# #####################################################################
#   # ###-----Transit Gateway Attachment-----#####
#   # TransitGatewayVpcAttachment:
#   #   Type: AWS::EC2::TransitGatewayVpcAttachment
#   #   Properties:
#   #     Options:
#   #       {
#   #         'ApplianceModeSupport': 'disable',
#   #         'DnsSupport': 'enable',
#   #         'Ipv6Support': 'disable',
#   #       }
#   #     SubnetIds:
#   #       - !Ref TransitGatewayAttachmnetSubnet01
#   #       - !Ref TransitGatewayAttachmnetSubnet02
#   #     Tags:
#   #       - Key: Name
#   #         Value: !Sub
#   #           - '${environmentName}-TGAtch'
#   #           - { environmentName: !Ref EnvironmentName }
#   #       - Key: Stack
#   #         Value: !Ref 'AWS::StackId'
#   #       - Key: map-migrated
#   #         Value: d-server-03urz7jkjyk1qu
#   #     TransitGatewayId: !Ref TransitGatewayId
#   #     VpcId: !Ref Vpc
# # ####################################################################################################

  #####-----NACL-----######
  BastionHostSubnetNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: NodeGroupSubnet-NACL

  PublicNatNetworkACL:
    Type: AWS::EC2::NetworkAcl
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: Name
          Value: NatSubnet-NACL

#   TransitGatewayAttachmnetSubnetNetworkACL:
#     Type: AWS::EC2::NetworkAcl
#     Properties:
#       VpcId: !Ref Vpc
#       Tags:
#         - Key: Name
#           Value: TransitGatewayAttachmnetSubnet-NACL

  ######-----Routetable-----#####
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub
            - '${environmentName}-PubRtb'
            - { environmentName: !Ref EnvironmentName }

# #   PrivateRouteTable01:
#     Type: AWS::EC2::RouteTable
#     Properties:
#       VpcId: !Ref Vpc
#       Tags:
#         - Key: 'Name'
#           Value: !Sub
#             - '${environmentName}-PvtRtb01'
#             - { environmentName: !Ref EnvironmentName }

  InterAccRouteTable01:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref Vpc
      Tags:
        - Key: 'Name'
          Value: !Sub
            - '${environmentName}-IntrAccRtb01'
            - { environmentName: !Ref EnvironmentName }

  PublicSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicNATSubnet01
      RouteTableId: !Ref PublicRouteTable


  #BastianHost subnets route table associations
  BastianHostSubnet01RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref BastionHostSubnet01
      RouteTableId: !Ref InterAccRouteTable01

  
  #####-----Routes-----#####
  #Default route for Public route table
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

#   # Default route for Private route tables
#   # DefaultRoutePrivateRouteTable01:
#   #   DependsOn:
#   #        - TransitGatewayVpcAttachment
#   #   Type: AWS::EC2::Route
#   #   Properties:
#   #     RouteTableId: !Ref PrivateRouteTable01
#   #     DestinationCidrBlock: 0.0.0.0/0
#   #     TransitGatewayId: !Ref TransitGatewayId

# 0.0.0.0/0 #
  # DefaultPrivateRoute01:
  #   Type: AWS::EC2::Route
  #   Properties:
  #     RouteTableId: !Ref PrivateRouteTable01
  #     DestinationCidrBlock: 0.0.0.0/0
  #     NatGatewayId: !Ref PublicNatGateway01

# # #10.0.0.0/8#
# #   DefaultPrivateRoute02:
# #     Type: AWS::EC2::Route
# #     Properties:
# #       RouteTableId: !Ref PrivateRouteTable01
# #       DestinationCidrBlock: 10.0.0.0/8
# #       TransitGatewayId: !Ref TransitGatewayId

# # #172.16.0.0/12#
# #   DefaultPrivateRoute03:
# #     Type: AWS::EC2::Route
# #     Properties:
# #       RouteTableId: !Ref PrivateRouteTable01
# #       DestinationCidrBlock: 172.16.0.0/12
# #       TransitGatewayId: !Ref TransitGatewayId

# # #192.168.0.0/16#
# #   DefaultPrivateRoute04:
# #     Type: AWS::EC2::Route
# #     Properties:
# #       RouteTableId: !Ref PrivateRouteTable01
# #       DestinationCidrBlock: 192.168.0.0/16
# #       TransitGatewayId: !Ref TransitGatewayId


  DefaultInterAccRoute01:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref InterAccRouteTable01
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref PublicNatGateway01

# # #10.0.0.0/8#
# #   DefaultInterAccRoute02:
# #     Type: AWS::EC2::Route
# #     Properties:
# #       RouteTableId: !Ref InterAccRouteTable01
# #       DestinationCidrBlock: 10.0.0.0/8
# #       TransitGatewayId: !Ref TransitGatewayId

# # #172.16.0.0/12#
# #   DefaultInterAccRoute03:
# #     Type: AWS::EC2::Route
# #     Properties:
# #       RouteTableId: !Ref InterAccRouteTable01
# #       DestinationCidrBlock: 172.16.0.0/12
# #       TransitGatewayId: !Ref TransitGatewayId

# # #192.168.0.0/16#
# #   DefaultInterAccRoute04:
# #     Type: AWS::EC2::Route
# #     Properties:
# #       RouteTableId: !Ref InterAccRouteTable01
# #       DestinationCidrBlock: 192.168.0.0/16
# #       TransitGatewayId: !Ref TransitGatewayId

# # #### >> Peering routes << ####
# # #172.30.197.0/27#
# #   DefaultPrivateNatRouteTable04:
# #     Type: AWS::EC2::Route
# #     Properties:
# #       RouteTableId: !Ref NatRouteTable01
# #       DestinationCidrBlock: 172.30.197.0/27
# #       VpcPeeringConnectionId: pcx-03a671567aec60536
 
 
Outputs:
  VpcId:
    Description: The VPC Id
    Value: !Ref Vpc

  MSKSubnetIds:
    Description: Public subnet IDs in the Vpc
    Value:
      !Join [
        ',',
        [!Ref MSKSubnet01, !Ref MSKSubnet02,!Ref MSKSubnet03 ],
      ]

  MSKSubnetAzs:
    Description: Public subnet IDs in the Vpc
    Value:
      !Join [
        ',',
        [
          !GetAtt MSKSubnet01.AvailabilityZone,
          !GetAtt MSKSubnet02.AvailabilityZone,
          !GetAtt MSKSubnet03.AvailabilityZone,
        ],
      ]

  BastionHostSubnetIds:
    Description: BastionHost subnet IDs in the Vpc
    Value:
      !Join [
        ',',
        [
          !Ref BastionHostSubnet01,
        ],
      ]

  BastionHostSubnetAzs:
    Description: JumpHost subnet IDs in the Vpc
    Value:
      !Join [
        ',',
        [
          !GetAtt BastionHostSubnet01.AvailabilityZone,
        ],
      ]


# #   ##########################################################################################
# #   # TransitGatewayVpcAttchmentId:
# #   #   Description: TransitGateway VPC attachment ID
# #   #   Value: !Ref TransitGatewayVpcAttachment
